# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-rake` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module RuboCop
end

module RuboCop::Cop
end

module RuboCop::Cop::Rake
end

class RuboCop::Cop::Rake::ClassDefinitionInTask < ::RuboCop::Cop::Cop
  def message(node); end
  def on_class(node); end
  def on_module(node); end
end

RuboCop::Cop::Rake::ClassDefinitionInTask::MSG = T.let(T.unsafe(nil), String)

class RuboCop::Cop::Rake::Desc < ::RuboCop::Cop::Cop
  include(::RuboCop::Cop::Rake::Helper::OnTask)

  def on_task(node); end

  private

  def can_insert_desc_to?(parent); end
  def parent_and_task(task_node); end
  def task_with_desc?(node); end
end

RuboCop::Cop::Rake::Desc::MSG = T.let(T.unsafe(nil), String)

class RuboCop::Cop::Rake::DuplicateNamespace < ::RuboCop::Cop::Cop
  include(::RuboCop::Cop::Rake::Helper::OnNamespace)

  def initialize(*_arg0); end

  def message_for_dup(previous:, current:, namespace:); end
  def namespaces(node); end
  def on_namespace(node); end
  def source_location(node); end
end

RuboCop::Cop::Rake::DuplicateNamespace::MSG = T.let(T.unsafe(nil), String)

class RuboCop::Cop::Rake::DuplicateTask < ::RuboCop::Cop::Cop
  include(::RuboCop::Cop::Rake::Helper::OnTask)

  def initialize(*_arg0); end

  def message_for_dup(previous:, current:, task_name:); end
  def namespaces(node); end
  def on_task(node); end
  def source_location(node); end
end

RuboCop::Cop::Rake::DuplicateTask::MSG = T.let(T.unsafe(nil), String)

module RuboCop::Cop::Rake::Helper
end

module RuboCop::Cop::Rake::Helper::ClassDefinition
  extend(::RuboCop::AST::NodePattern::Macros)
  extend(::RuboCop::Cop::Rake::Helper::ClassDefinition)

  def class_definition?(param0 = T.unsafe(nil)); end
  def in_class_definition?(node); end
end

module RuboCop::Cop::Rake::Helper::OnNamespace
  extend(::RuboCop::AST::NodePattern::Macros)

  def namespace?(param0 = T.unsafe(nil)); end
  def on_send(node); end
end

module RuboCop::Cop::Rake::Helper::OnTask
  extend(::RuboCop::AST::NodePattern::Macros)

  def on_send(node); end
  def task?(param0 = T.unsafe(nil)); end
end

module RuboCop::Cop::Rake::Helper::TaskDefinition
  extend(::RuboCop::AST::NodePattern::Macros)
  extend(::RuboCop::Cop::Rake::Helper::TaskDefinition)

  def in_task_or_namespace?(node); end
  def task_or_namespace?(param0 = T.unsafe(nil)); end
end

module RuboCop::Cop::Rake::Helper::TaskName
  extend(::RuboCop::Cop::Rake::Helper::TaskName)

  def task_name(node); end
end

class RuboCop::Cop::Rake::MethodDefinitionInTask < ::RuboCop::Cop::Cop
  def on_def(node); end
  def on_defs(node); end
end

RuboCop::Cop::Rake::MethodDefinitionInTask::MSG = T.let(T.unsafe(nil), String)

RuboCop::NodePattern = RuboCop::AST::NodePattern

RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

module RuboCop::Rake
end

RuboCop::Rake::CONFIG = T.let(T.unsafe(nil), Hash)

class RuboCop::Rake::Error < ::StandardError
end

module RuboCop::Rake::Inject
  class << self
    def defaults!; end
  end
end

RuboCop::Rake::VERSION = T.let(T.unsafe(nil), String)

RuboCop::Token = RuboCop::AST::Token
